import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards import (
    get_main_keyboard,
    get_filters_keyboard,
    get_build_types_keyboard,
    get_style_keyboard,
    get_difficulty_keyboard,
    get_search_results_keyboard,
    get_rating_keyboard,
    get_rating_stats_keyboard,
    get_cancel_keyboard,
    get_showcase_keyboard
)

from filters import UserFilters

from db.crud import build_crud, analytics_crud
from db.models import BuildType, BuildStyle, Difficulty, BUILD_TYPE_MAP, STYLE_MAP, DIFFICULTY_MAP
from db.crud import showcase_crud


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

class FilterStates(StatesGroup):
    waiting_for_filters = State()

class ShowcaseStates(StatesGroup):
    waiting_showcase_image = State()
    waiting_showcase_description = State()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
   
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await analytics_crud.log_user_activity(
        user_id=message.from_user.id,
        action='start',
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±–æ—Ä–æ–∫ –≤ –±–∞–∑–µ
    builds_count = await build_crud.get_builds_count()
    
    welcome_text = f"""
üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Minecraft Build Bot!</b>

üìä <b>–í –Ω–∞—à–µ–π –±–∞–∑–µ:</b> {builds_count} —Å–±–æ—Ä–æ–∫

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É –¥–ª—è –∏–≥—Ä—ã:

üé≤ <b>–°–ª—É—á–∞–π–Ω–∞—è —Å–±–æ—Ä–∫–∞</b> - –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ö–æ—á–µ—à—å
üîç <b>–ü–æ–¥–±–æ—Ä –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º</b> - –Ω–∞–π–¥—É –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ
‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É</b> - –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π —Å–±–æ—Ä–∫–æ–π

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá
    """
    
    await message.answer(
        welcome_text, 
        reply_markup=get_main_keyboard(), 
        parse_mode="HTML"
    )

@router.message(Command("random_build"))
async def random_build_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random_build"""
    await show_random_build(message)
    
    #logging user
    await analytics_crud.log_user_activity(
        user_id=message.from_user.id,
        action='random_build'
    )

@router.message(Command("build_filters"))
async def build_filters_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /build_filters"""
    await show_filters_menu(message)

    #logging user
    await analytics_crud.log_user_activity(
        user_id=message.from_user.id,
        action='build_filters'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
@router.message(lambda message: message.text == "üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å–±–æ—Ä–∫–∞")
async def random_build_button_handler(message: types.Message):
    await show_random_build(message)

    #logging user
    await analytics_crud.log_user_activity(
        user_id=message.from_user.id,
        action='random_build'
    )

@router.message(lambda message: message.text == "üîç –ü–æ–¥–±–æ—Ä –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º")
async def filters_button_handler(message: types.Message):
    await show_filters_menu(message)

    #logging user
    await analytics_crud.log_user_activity(
        user_id=message.from_user.id,
        action='build_filters'
    )

@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É")
async def add_build_button_handler(message: types.Message):
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞! üöÄ\n"
        "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.",
        parse_mode="HTML"
    )

@router.message(lambda message: message.text == "üìä –¢–æ–ø —Å–±–æ—Ä–æ–∫")
async def top_builds_button_handler(message: types.Message):
    await show_top_builds(message)

# CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –§–ò–õ–¨–¢–†–û–í

@router.callback_query(F.data == "filter_type")
async def filter_type_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–±–æ—Ä–∫–∏"""
    await callback.message.edit_text(
        "üéØ <b>–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–±–æ—Ä–∫–∏:</b>\n\n"
        "–ö–∞–∫–æ–π –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç —Ç—ã –∏—â–µ—à—å?",
        reply_markup=get_build_types_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "filter_style")
async def filter_style_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    await callback.message.edit_text(
        "üè∞ <b>–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å —Å–±–æ—Ä–∫–∏:</b>\n\n"
        "–í –∫–∞–∫–æ–º —Å–µ—Ç—Ç–∏–Ω–≥–µ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å?",
        reply_markup=get_style_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "filter_difficulty")
async def filter_difficulty_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    await callback.message.edit_text(
        "‚ö° <b>–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:</b>\n\n"
        "–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω—É—é —Å–±–æ—Ä–∫—É —Ç—ã –∏—â–µ—à—å?",
        reply_markup=get_difficulty_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("type_"))
async def build_type_selected_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    build_type_key = callback.data.replace("type_", "")
    build_type_enum = BUILD_TYPE_MAP.get(build_type_key)
    
    if build_type_enum:
        UserFilters.set_filter(callback.from_user.id, 'build_type', build_type_key)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–¢–∏–ø —Å–±–æ—Ä–∫–∏ –≤—ã–±—Ä–∞–Ω!</b>\n\n"
            f"{UserFilters.get_active_filters_text(callback.from_user.id)}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
            reply_markup=get_filters_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer("–¢–∏–ø —Å–±–æ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ‚úÖ")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞", show_alert=True)

@router.callback_query(F.data.startswith("style_"))
async def style_selected_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
    style_key = callback.data.replace("style_", "")
    style_enum = STYLE_MAP.get(style_key)
    
    if style_enum:
        UserFilters.set_filter(callback.from_user.id, 'style', style_key)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω!</b>\n\n"
            f"{UserFilters.get_active_filters_text(callback.from_user.id)}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
            reply_markup=get_filters_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer("–°—Ç–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ‚úÖ")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è", show_alert=True)

@router.callback_query(F.data.startswith("difficulty_"))
async def difficulty_selected_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    difficulty_key = callback.data.replace("difficulty_", "")
    difficulty_enum = DIFFICULTY_MAP.get(difficulty_key)
    
    if difficulty_enum:
        UserFilters.set_filter(callback.from_user.id, 'difficulty', difficulty_key)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞!</b>\n\n"
            f"{UserFilters.get_active_filters_text(callback.from_user.id)}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏ –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
            reply_markup=get_filters_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer("–°–ª–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! ‚úÖ")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", show_alert=True)

@router.callback_query(F.data == "back_to_filters")
async def back_to_filters_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    await callback.message.edit_text(
        f"üîç <b>–ü–æ–¥–±–æ—Ä —Å–±–æ—Ä–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º</b>\n\n"
        f"{UserFilters.get_active_filters_text(callback.from_user.id)}\n\n"
        f"–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_filters_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "filter_search")
async def filter_search_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    filters = UserFilters.get_filters(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
    if not any(filters.values()):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä!", show_alert=True)
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ enum'—ã –¥–ª—è –ë–î
    build_type_enum = BUILD_TYPE_MAP.get(filters['build_type']) if filters['build_type'] else None
    style_enum = STYLE_MAP.get(filters['style']) if filters['style'] else None
    difficulty_enum = DIFFICULTY_MAP.get(filters['difficulty']) if filters['difficulty'] else None
    
    # –ò—â–µ–º —Å–±–æ—Ä–∫–∏ –≤ –ë–î
    builds = await build_crud.get_builds_by_filters(
        build_type=build_type_enum,
        style=style_enum,
        difficulty=difficulty_enum,
        limit=5
    )
    
    if not builds:
        await callback.message.edit_text(
            f"‚ùå <b>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
            f"{UserFilters.get_active_filters_text(callback.from_user.id)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–±–æ—Ä–∫—É.",
            reply_markup=get_filters_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å–±–æ—Ä–∫—É - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    build = builds[0]
    await handle_callback_build(callback, build)
    await callback.answer()

async def handle_callback_build(callback: types.CallbackQuery, build):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ —Å –ø–æ–∫–∞–∑–æ–º —Å–±–æ—Ä–∫–∏ - –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    text = format_build_text(build)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if build.image_url:
        try:
            await callback.message.answer_photo(
                photo=build.image_url,
                caption=text,
                reply_markup=get_search_results_keyboard(build.id),
                parse_mode="HTML"
            )
            return
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç: {e}")
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    await callback.message.answer(
        text,
        reply_markup=get_search_results_keyboard(build.id),
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "random_another")
async def random_another_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–≥–æ–π —Å–ª—É—á–∞–π–Ω–æ–π —Å–±–æ—Ä–∫–∏"""
    try:
        logging.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥—Ä—É–≥—É—é —Å–ª—É—á–∞–π–Ω—É—é —Å–±–æ—Ä–∫—É")
        
        build = await build_crud.get_random_build()
        if build:
            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–±–æ—Ä–∫–∞: {build.name} (ID: {build.id})")
            await handle_callback_build(callback, build)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        else:
            logging.warning("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç —Å–±–æ—Ä–æ–∫ –∏–ª–∏ –æ–Ω–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã")
            await callback.message.edit_text(
                "‚ùå <b>–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–±–æ—Ä–æ–∫</b>\n\n",
                parse_mode="HTML"
            )
    except Exception as e:
        logging.error(f"üö® –û—à–∏–±–∫–∞ –≤ random_another_callback: {e}", exc_info=True)
        await callback.message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–±–æ—Ä–∫–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
    await callback.answer()




@router.callback_query(F.data == "new_search")
async def new_search_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    UserFilters.clear_filters(callback.from_user.id)
    await show_filters_menu(callback.message)
    await callback.answer()

@router.callback_query(F.data.startswith("download_"))
async def download_build_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–±–æ—Ä–∫–∏ –∏–∑ callback data
        build_id_str = callback.data.replace("download_", "")
        
        if build_id_str.isdigit():
            build_id = int(build_id_str)
            build = await build_crud.get_build_by_id(build_id=build_id)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
            updated_build = await build_crud.increment_downloads(build_id)
            
            if updated_build:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º
                await handle_callback_build(callback, updated_build)
                await callback.answer(f"üì• –°—Å—ã–ª–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞")
                await callback.message.answer(text=f"üì• <a href='{build.download_url}'>–°–∫–∞—á–∞—Ç—å</a>")
            else:
                await callback.answer("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        else:
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ ID
            await callback.answer(f"üì• –°—Å—ã–ª–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞")
            
    except Exception as e:
        print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        logging.error(f"Error incrementing download count: {e}")
        print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞", show_alert=True)

@router.callback_query(F.data == "download_build")
async def download_build_fallback_callback(callback: types.CallbackQuery):
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ ID –≤ callback"""
    await callback.answer("üì• –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ!", show_alert=True)

# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

async def send_new_build_message(message: types.Message, build):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–∫–µ"""
    text = format_build_text(build)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    if build.image_url:
        try:
            await message.answer_photo(
                photo=build.image_url,
                caption=text,
                reply_markup=get_search_results_keyboard(build_id=build.id),
                parse_mode="HTML"
            )
            return
        except Exception as e:
            logging.error(f"Error sending photo, falling back to text: {e}")
    
    # Fallback - –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        text,
        reply_markup=get_search_results_keyboard(build.id),
        parse_mode="HTML",
        disable_web_page_preview=True
    )

async def edit_build_message(message: types.Message, build):
    """–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–∫–µ"""
    text = format_build_text(build)
    
    await message.edit_text(
        text,
        reply_markup=get_search_results_keyboard(build.id),
        parse_mode="HTML",
        disable_web_page_preview=True
    )

    # –û–ë–©–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –¢–ï–ö–°–¢–ê
def format_build_text(build):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–±–æ—Ä–∫–∏"""
    type_display = {
        BuildType.SURVIVAL: "üèïÔ∏è –í—ã–∂–∏–≤–∞–Ω–∏–µ",
        BuildType.ADVENTURE: "üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ/–†–ü–ì",
        BuildType.HARDCORE: "üíÄ –•–∞—Ä–¥–∫–æ—Ä", 
        BuildType.PUZZLE: "üß© –ü–∞–∑–ª/–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞",
        BuildType.CREATIVE: "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
        BuildType.MINIGAME: "üéØ –ú–∏–Ω–∏-–∏–≥—Ä—ã"
    }.get(build.build_type, build.build_type.value)
    
    style_display = {
        BuildStyle.FANTASY: "üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏",
        BuildStyle.MEDIEVAL: "üè∞ –°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ",
        BuildStyle.POSTAPOCALYPTIC: "‚ò¢Ô∏è –ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å",
        BuildStyle.SCI_FI: "üöÄ –¢–µ—Ö–Ω–æ/–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", 
        BuildStyle.MODERN: "üèôÔ∏è –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∏—Ä",
        BuildStyle.FAIRYTALE: "üåà –°–∫–∞–∑–æ—á–Ω—ã–π/–ú—É–ª—å—Ç—è—à–Ω—ã–π"
    }.get(build.style, build.style.value)
    
    difficulty_display = {
        Difficulty.BEGINNER: "üü¢ –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤",
        Difficulty.INTERMEDIATE: "üü° –°—Ä–µ–¥–Ω—è—è",
        Difficulty.EXPERT: "üî¥ –î–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
    }.get(build.difficulty, build.difficulty.value)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating_display = f"‚≠ê {build.rating}/5" if build.rating > 0 else "‚òÜ –ï—â–µ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    
    return (
        f"üé≤ <b>{build.name}</b>\n\n"
        f"{build.description}\n\n"
        f"üîπ <b>–¢–∏–ø:</b> {type_display}\n"
        f"üîπ <b>–°—Ç–∏–ª—å:</b> {style_display}\n" 
        f"üîπ <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {difficulty_display}\n"
        f"üîπ <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–π:</b> {build.downloads_count}\n"
        f"üîπ <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating_display} ({build.votes_count} –æ—Ü–µ–Ω–æ–∫)\n"
        f"üîπ <b>ID —Å–±–æ—Ä–∫–∏:</b> {build.id}\n\n"
    )


async def show_build_details(message: types.Message, build, similar_builds=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–±–æ—Ä–∫–∏ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø, —Å—Ç–∏–ª—å –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    type_display = {
        BuildType.SURVIVAL: "üèïÔ∏è –í—ã–∂–∏–≤–∞–Ω–∏–µ",
        BuildType.ADVENTURE: "üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ/–†–ü–ì",
        BuildType.HARDCORE: "üíÄ –•–∞—Ä–¥–∫–æ—Ä", 
        BuildType.PUZZLE: "üß© –ü–∞–∑–ª/–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞",
        BuildType.CREATIVE: "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
        BuildType.MINIGAME: "üéØ –ú–∏–Ω–∏-–∏–≥—Ä—ã"
    }.get(build.build_type, build.build_type.value)
    
    style_display = {
        BuildStyle.FANTASY: "üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏",
        BuildStyle.MEDIEVAL: "üè∞ –°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ",
        BuildStyle.POSTAPOCALYPTIC: "‚ò¢Ô∏è –ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å",
        BuildStyle.SCI_FI: "üöÄ –¢–µ—Ö–Ω–æ/–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", 
        BuildStyle.MODERN: "üèôÔ∏è –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∏—Ä",
        BuildStyle.FAIRYTALE: "üåà –°–∫–∞–∑–æ—á–Ω—ã–π/–ú—É–ª—å—Ç—è—à–Ω—ã–π"
    }.get(build.style, build.style.value)
    
    difficulty_display = {
        Difficulty.BEGINNER: "üü¢ –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤",
        Difficulty.INTERMEDIATE: "üü° –°—Ä–µ–¥–Ω—è—è",
        Difficulty.EXPERT: "üî¥ –î–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
    }.get(build.difficulty, build.difficulty.value)
    
    text = (
        f"üé≤ <b>{build.name}</b>\n\n"
        f"{build.description}\n\n"
        f"üîπ <b>–¢–∏–ø:</b> {type_display}\n"
        f"üîπ <b>–°—Ç–∏–ª—å:</b> {style_display}\n" 
        f"üîπ <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {difficulty_display}\n"
        f"üîπ <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–π:</b> {build.downloads_count}\n\n"
    )
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        text,
        reply_markup=get_search_results_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )

async def show_random_build(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–±–æ—Ä–∫—É –∏–∑ –ë–î (–¥–ª—è reply-–∫–Ω–æ–ø–æ–∫)"""
    try:
        build = await build_crud.get_random_build()
        if build:
            # –î–ª—è reply-–∫–Ω–æ–ø–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await send_new_build_message(message, build)
        else:
            await message.answer(
                "‚ùå <b>–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–±–æ—Ä–æ–∫</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å–±–æ—Ä–∫–∏.",
                parse_mode="HTML"
            )
    except Exception as e:
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–±–æ—Ä–∫–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

async def show_filters_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    user_id = message.from_user.id
    await message.answer(
        f"üîç <b>–ü–æ–¥–±–æ—Ä —Å–±–æ—Ä–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º</b>\n\n"
        f"{UserFilters.get_active_filters_text(user_id)}\n\n"
        f"–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏:",
        reply_markup=get_filters_keyboard(),
        parse_mode="HTML"
    )

async def show_top_builds(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø —Å–±–æ—Ä–æ–∫"""
    top_builds = await build_crud.get_top_builds(limit=5)
    
    if not top_builds:
        await message.answer(
            "üèÜ <b>–¢–æ–ø —Å–±–æ—Ä–æ–∫</b>\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–±–æ—Ä–∫–∞—Ö.",
            parse_mode="HTML"
        )
        return
    
    text = "üèÜ <b>–¢–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–±–æ—Ä–æ–∫:</b>\n\n"
    
    for i, build in enumerate(top_builds, 1):
        text += (
            f"{i}. <b>{build.name}</b>\n"
            f"   üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {build.downloads_count}\n"
            f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {build.rating}/5\n\n"
        )
    
    text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —ç—Ç–∏ —Å–±–æ—Ä–∫–∏! üîç"
    
    await message.answer(text, parse_mode="HTML")
    print(message.from_user.id)

@router.callback_query(F.data.startswith("rate_"))
async def rate_build_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏ —Å–±–æ—Ä–∫–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        parts = callback.data.split("_")
        build_id = int(parts[1])
        rating = int(parts[2])
        
        if rating == 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            user_vote = await build_crud.get_user_vote(build_id, callback.from_user.id)
            user_rating = user_vote.rating if user_vote else None
            
            await callback.message.edit_reply_markup(
                reply_markup=get_rating_keyboard(build_id, user_rating)
            )
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏
        if rating < 1 or rating > 5:
            await callback.answer("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
        result = await build_crud.add_vote(build_id, callback.from_user.id, rating)
        
        if result['success']:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            build = await build_crud.get_build_by_id(build_id)
            await edit_build_message(callback.message, build)
            await callback.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating}‚≠ê")
        else:
            if result['error'] == 'already_voted':
                await callback.answer("‚ùå –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É —Å–±–æ—Ä–∫—É!", show_alert=True)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Å–±–æ—Ä–∫–∏", show_alert=True)
                
    except Exception as e:
        logging.error(f"Error rating build: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Å–±–æ—Ä–∫–∏", show_alert=True)

@router.callback_query(F.data.startswith("rating_stats_"))
async def rating_stats_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    try:
        build_id = int(callback.data.replace("rating_stats_", ""))
        stats = await build_crud.get_build_rating_stats(build_id)
        
        if not stats:
            await callback.answer("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞</b>\n\n"
        stats_text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{stats['average_rating']}/5</b>\n"
        stats_text += f"üë• –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: <b>{stats['votes_count']}</b>\n\n"
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
        if stats['distribution']:
            stats_text += "<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:</b>\n"
            for star in range(5, 0, -1):
                count = stats['distribution'].get(star, 0)
                percentage = (count / stats['votes_count']) * 100 if stats['votes_count'] > 0 else 0
                bar = "‚ñà" * int(percentage / 10)  # –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                stats_text += f"{'‚≠ê' * star}{'‚òÜ' * (5-star)}: {count} {bar} ({percentage:.1f}%)\n"
        
        #—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            await callback.message.delete()
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        await callback.message.answer(
            stats_text,
            reply_markup=get_rating_stats_keyboard(build_id),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error showing rating stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data.startswith("back_to_build_"))
async def back_to_build_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–±–æ—Ä–∫–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        build_id = int(callback.data.replace("back_to_build_", ""))
        build = await build_crud.get_build_by_id(build_id)
        
        if build:
            await handle_callback_build(callback, build)
        else:
            await callback.answer("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            
    except Exception as e:
        logging.error(f"Error returning to build: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–±–æ—Ä–∫–µ", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫
@router.message(F.text == "üèóÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏")
async def showcase_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É"""
    build = await showcase_crud.get_random_showcase()
    
    if not build:
        keyboard = [
            [types.InlineKeyboardButton(text="üì§ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É", callback_data="add_showcase")]
        ]
        reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(
            "üèóÔ∏è <b>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫</b>\n\n"
            "–ë—É–¥—å –ø–µ—Ä–≤—ã–º - –¥–æ–±–∞–≤—å —Å–≤–æ—é –∫—Ä—É—Ç—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É!",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        return
    
    text = f"üèóÔ∏è <b>–ü–æ—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
    if build.description:
        text += f"\n{build.description}\n"
    text += f"\n‚ù§Ô∏è <b>–õ–∞–π–∫–æ–≤:</b> {build.likes_count}"
    
    await message.answer_photo(
        photo=build.image_url,
        caption=text,
        reply_markup=get_showcase_keyboard(build.id)
    )

# Callback –¥–ª—è –ª–∞–π–∫–∞
@router.callback_query(F.data.startswith("like_build_"))
async def like_build_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏"""
    build_id = int(callback.data.replace("like_build_", ""))
    
    success = await showcase_crud.like_build(build_id, callback.from_user.id)
    
    if success:
        await callback.answer("‚ù§Ô∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!")
    else:
        await callback.answer("‚ùå –í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç—É –ø–æ—Å—Ç—Ä–æ–π–∫—É")

# Callback –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Å—Ç—Ä–æ–π–∫–∏
@router.callback_query(F.data == "next_showcase")
async def next_showcase_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É"""
    build = await showcase_crud.get_random_showcase()
    
    if build:
        text = f"üèóÔ∏è <b>–ü–æ—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        if build.description:
            text += f"\n{build.description}\n"
        text += f"\n‚ù§Ô∏è <b>–õ–∞–π–∫–æ–≤:</b> {build.likes_count}"
        
        await callback.message.answer_photo(photo=build.image_url, caption=text, parse_mode="HTML", reply_markup=get_showcase_keyboard(build.id))
        
    else:
        await callback.answer("‚ùå –ë–æ–ª—å—à–µ –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç")
    
    await callback.answer()

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏
@router.callback_query(F.data == "add_showcase")
async def add_showcase_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏"""
    await callback.message.answer(
        "üèóÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–≤–æ–µ–π –ø–æ—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ShowcaseStates.waiting_showcase_image)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@router.message(ShowcaseStates.waiting_showcase_image)
async def process_showcase_image(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
    
    if not message.text.startswith(('http://', 'https://')):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞! –û—Ç–ø—Ä–∞–≤—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return
    
    await state.update_data(image_url=message.text)
    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(ShowcaseStates.waiting_showcase_description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(ShowcaseStates.waiting_showcase_description)
async def process_showcase_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
    
    user_data = await state.get_data()
    description = None if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—Ä–æ–π–∫—É
    build = await showcase_crud.add_build_showcase(
        user_id=message.from_user.id,
        image_url=user_data['image_url'],
        description=description
    )
    
    await message.answer(
        "‚úÖ <b>–ü–æ—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –µ—ë –æ—Ü–µ–Ω–∏—Ç—å ‚ù§Ô∏è",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML",
    )
    await state.clear()