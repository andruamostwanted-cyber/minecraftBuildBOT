import asyncio
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_IDS
from db.crud import build_crud, analytics_crud
from db.models import BuildType, BuildStyle, Difficulty, BUILD_TYPE_MAP, STYLE_MAP, DIFFICULTY_MAP
from keyboards import get_admin_keyboard, get_admin_builds_keyboard, get_admin_moderation_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_router = Router()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_filter(message: types.Message) -> bool:
    return ADMIN_IDS == message.from_user.id

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_build_name = State()
    waiting_build_description = State()
    waiting_build_url = State()
    waiting_build_image = State() 
    waiting_build_type = State()
    waiting_build_style = State()
    waiting_build_difficulty = State()

class NewsletterStates(StatesGroup):
    waiting_newsletter_message = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@admin_router.message(Command("admin"), admin_filter)
async def admin_panel_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    await message.answer(
        "üõ†Ô∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫
@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", admin_filter)
async def admin_stats_handler(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    try:
        builds_count = await build_crud.get_builds_count()
        top_builds = await build_crud.get_top_builds(limit=3)
        
        stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–±–æ—Ä–æ–∫: <b>{builds_count}</b>\n"
        
        if top_builds:
            stats_text += "\n<b>–¢–æ–ø-3 —Å–±–æ—Ä–∫–∏:</b>\n"
            for i, build in enumerate(top_builds, 1):
                stats_text += f"{i}. {build.name} - {build.downloads_count} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π\n"
        else:
            stats_text += "\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–±–æ—Ä–∫–∞—Ö"
            
        await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Error getting stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@admin_router.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∞–º–∏", admin_filter)
async def admin_builds_handler(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∞–º–∏"""
    await message.answer(
        "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_builds_keyboard(),
        parse_mode="HTML"
    )

@admin_router.message(F.text == "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–±–æ—Ä–æ–∫", admin_filter)
async def view_all_builds_handler(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–±–æ—Ä–æ–∫"""
    try:
        from db.crud import build_crud
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–±–æ—Ä–∫–∏ (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
        builds = await build_crud.get_builds_by_filters(limit=50)
        
        if not builds:
            await message.answer("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç —Å–±–æ—Ä–æ–∫")
            return
        
        text = "üëÅÔ∏è <b>–í—Å–µ —Å–±–æ—Ä–∫–∏ –≤ –±–∞–∑–µ:</b>\n\n"
        
        for i, build in enumerate(builds, 1):
            status = "‚úÖ" if build.is_approved else "‚è≥"
            text += f"{status} <b>{build.name}</b>\n"
            text += f"   ID: {build.id} | –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {build.downloads_count}\n"
            text += f"   –¢–∏–ø: {build.build_type.value} | –°—Ç–∏–ª—å: {build.style.value}\n"
            
            if i % 5 == 0:  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 5 —Å–±–æ—Ä–æ–∫
                await message.answer(text, parse_mode="HTML")
                text = ""
        
        if text.strip():  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–±–æ—Ä–∫–∏
            await message.answer(text, parse_mode="HTML")
            
    except Exception as e:
        logging.error(f"Error viewing builds: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–±–æ—Ä–æ–∫")

@admin_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É (admin)", admin_filter)
async def add_build_handler(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏"""
    await message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–±–æ—Ä–∫–∏</b>\n\n"
        "üìù <b>–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏\n"
        "2. –û–ø–∏—Å–∞–Ω–∏–µ\n" 
        "3. –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
        "4. –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "5. –¢–∏–ø, —Å—Ç–∏–ª—å –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏:",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_build_name)

@admin_router.message(AdminStates.waiting_build_name, admin_filter)
async def process_build_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏"""
    await state.update_data(name=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏:")
    await state.set_state(AdminStates.waiting_build_description)

@admin_router.message(AdminStates.waiting_build_description, admin_filter)
async def process_build_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏"""
    await state.update_data(description=message.text)
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
    await state.set_state(AdminStates.waiting_build_url)

@admin_router.message(AdminStates.waiting_build_url, admin_filter)
async def process_build_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ —Å–±–æ—Ä–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL
    if not message.text.startswith(('http://', 'https://')):
        await message.answer(
            "‚ùå <b>–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(download_url=message.text)

    keyboard = [
        [types.KeyboardButton(text="üö´ –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")],
        [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")]
    ]
    reply_markup = types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "üñºÔ∏è <b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∫–∏?</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"üö´ –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\"\n\n"
        "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (jpg, png)</i>",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_build_image)

@admin_router.message(AdminStates.waiting_build_image, admin_filter)
async def process_build_image(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏"""
    user_data = await state.get_data()
    
    try:
        if message.text == "üö´ –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
            image_url = None
            await message.answer(
                "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                reply_markup=types.ReplyKeyboardRemove()
            )
        elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
            await state.clear()
            await message.answer(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=get_admin_builds_keyboard()
            )
            return
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if message.text.startswith(('http://', 'https://')):
                image_url = message.text
                await message.answer(
                    "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!",
                    reply_markup=types.ReplyKeyboardRemove()
                )
            else:
                await message.answer(
                    "‚ùå <b>–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpg, png) "
                    "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"üö´ –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\"",
                    parse_mode="HTML"
                )
                return
            await state.update_data(image_url=image_url)
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å–±–æ—Ä–∫–∏
    from keyboards import get_admin_build_types_keyboard
    await message.answer(
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–±–æ—Ä–∫–∏:</b>\n\n"
        "<i>–ö–∞–∫–æ–π –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–±–æ—Ä–∫–∞?</i>",
        reply_markup=get_admin_build_types_keyboard()
    )
    await state.set_state(AdminStates.waiting_build_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞, —Å—Ç–∏–ª—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –£–ù–ò–ö–ê–õ–¨–ù–´–ú–ò callback data
@admin_router.callback_query(F.data.startswith("admin_type_"), AdminStates.waiting_build_type)
async def process_build_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–±–æ—Ä–∫–∏"""
    build_type = callback.data.replace("admin_type_", "")
    await state.update_data(build_type=build_type)
    
    from keyboards import get_admin_style_keyboard
    await callback.message.edit_text(
        "üè∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Å–±–æ—Ä–∫–∏:",
        reply_markup=get_admin_style_keyboard()
    )
    await state.set_state(AdminStates.waiting_build_style)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_style_"), AdminStates.waiting_build_style)
async def process_build_style(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è —Å–±–æ—Ä–∫–∏"""
    style = callback.data.replace("admin_style_", "")
    await state.update_data(style=style)
    
    from keyboards import get_admin_difficulty_keyboard
    await callback.message.edit_text(
        "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∫–∏:",
        reply_markup=get_admin_difficulty_keyboard()
    )
    await state.set_state(AdminStates.waiting_build_difficulty)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_difficulty_"), AdminStates.waiting_build_difficulty)
async def process_build_difficulty(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏"""
    try:
        difficulty = callback.data.replace("admin_difficulty_", "")
        user_data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        build = await build_crud.create_build(
            name=user_data['name'],
            description=user_data['description'],
            download_url=user_data['download_url'],
            build_type=BUILD_TYPE_MAP[user_data['build_type']],
            style=STYLE_MAP[user_data['style']],
            difficulty=DIFFICULTY_MAP[difficulty],
            image_url=user_data.get('image_url'),  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            added_by=callback.from_user.id
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        success_text = (
            f"‚úÖ <b>–°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {build.name}\n"
            f"<b>–¢–∏–ø:</b> {user_data['build_type']}\n"
            f"<b>–°—Ç–∏–ª—å:</b> {user_data['style']}\n"
            f"<b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {difficulty}\n"
        )
        
        if user_data.get('image_url'):
            success_text += f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ\n"
        else:
            success_text += f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
            
        success_text += f"\n<b>ID —Å–±–æ—Ä–∫–∏:</b> {build.id}"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        if user_data.get('image_url'):
            try:
                await callback.message.answer_photo(
                    photo=user_data['image_url'],
                    caption=success_text,
                    parse_mode="HTML",
                    reply_markup=get_admin_keyboard()
                )
            except Exception as e:
                logging.error(f"Error sending photo: {e}")
                await callback.message.answer(
                    f"{success_text}\n\n‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</i>",
                    parse_mode="HTML",
                    reply_markup=get_admin_keyboard()
                )
        else:
            await callback.message.answer(success_text, parse_mode="HTML", reply_markup=get_admin_keyboard())
        
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error creating build: {e}")
        await callback.message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–±–æ—Ä–∫–∏</b>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
        await state.clear()
    
    await callback.answer()

@admin_router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Å–±–æ—Ä–∫—É", admin_filter)
async def delete_build_handler(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏"""
    await message.answer(
        "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏</b>\n\n"
        "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/delete_build ID_—Å–±–æ—Ä–∫–∏</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/delete_build 1</code>",
        parse_mode="HTML"
    )

@admin_router.message(Command("delete_build"), admin_filter)
async def delete_build_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏ –ø–æ ID"""
    try:
        build_id = int(message.text.split()[1])
        build = await build_crud.get_build_by_id(build_id)
        
        if not build:
            await message.answer("‚ùå –°–±–æ—Ä–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—É—é)
        build.is_approved = False
        answer = await build_crud.delete_build(build_id=build_id)
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ delete –≤ CRUD
        
        if answer:
            await message.answer(f"‚úÖ –°–±–æ—Ä–∫–∞ '{build.name}' —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–±–æ—Ä–∫—É '{build.name}'!")

        print("-------->–£–î–ê–õ–ï–ù–û!<---------")
        
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_build ID")
    except Exception as e:
        logging.error(f"Error deleting build: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–±–æ—Ä–∫–∏")

@admin_router.message(F.text == "‚è≥ –ú–æ–¥–µ—Ä–∞—Ü–∏—è", admin_filter)
async def moderation_handler(message: types.Message):
    """–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–±–æ—Ä–æ–∫
    await message.answer(
        "‚è≥ <b>–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        "–ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–±–æ—Ä–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n"
        "–ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=get_admin_moderation_keyboard(),
        parse_mode="HTML"
    )

@admin_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", admin_filter)
async def back_to_admin_handler(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await admin_panel_handler(message)

@admin_router.message(F.text == "üéÆ –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", admin_filter)
async def back_to_main_handler(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    from handlers import start_handler
    await start_handler(message)

@admin_router.message(Command("contacts"), admin_filter)
async def contacts_stats_handler(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    await message.answer(
        "üìû <b>–°–∏—Å—Ç–µ–º–∞ —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\"\n\n"
        "<b>–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å:</b>\n"
        "1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ (reply) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—à–ª–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é\n\n"
        "<b>–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        "‚Ä¢ –ò–º—è –∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
        parse_mode="HTML"
    )

# statistics
@admin_router.message(Command("stats"), admin_filter)
async def stats_handler(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        daily_stats = await analytics_crud.get_daily_stats()
        total_users = await analytics_crud.get_total_users()
        top_actions = await analytics_crud.get_top_actions(5)
        
        stats_text = (
            "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {daily_stats['date']}\n"
            f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
            f"üÜï <b>–ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è:</b> {daily_stats['new_users']}\n"
            f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è:</b> {daily_stats['active_users']}\n"
            f"üìà <b>–î–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è:</b> {daily_stats['total_actions']}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "<b>–¢–æ–ø-5 –¥–µ–π—Å—Ç–≤–∏–π:</b>\n"
        )
        
        for action, count in top_actions:
            action_name = {
                'start': 'üöÄ –°—Ç–∞—Ä—Ç',
                'random_build': 'üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å–±–æ—Ä–∫–∞', 
                'build_filters': 'üîç –ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º',
                'contact': 'üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º'
            }.get(action, action)
            
            stats_text += f"‚Ä¢ {action_name}: {count}\n"
        
        await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Error getting stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@admin_router.message(Command("user_stats"), admin_filter)
async def user_stats_handler(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/user_stats ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/user_stats 123456789</code>",
                parse_mode="HTML"
            )
            return
        
        user_id = int(parts[1])
        stats = await analytics_crud.get_user_stats(user_id)
        
        if not stats['first_seen']:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")
            return
        
        user_text = (
            f"üë§ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> ID: {user_id}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìÖ <b>–ü–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> {stats['first_seen'].timestamp.strftime('%d.%m.%Y %H:%M')}\n"
            f"üïí <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> {stats['last_seen'].timestamp.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä <b>–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π:</b> {stats['total_actions']}\n"
            f"üéØ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> {stats['last_seen'].action}\n"
        )
        
        await message.answer(user_text, parse_mode="HTML")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logging.error(f"Error getting user stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
#----------------------------
@admin_router.message(F.text == "üé∫ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", admin_filter)
async def newsletter_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await message.answer(
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
        "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞</i>",
        parse_mode="HTML"
    )
    await state.set_state(NewsletterStates.waiting_newsletter_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@admin_router.message(NewsletterStates.waiting_newsletter_message, admin_filter)
async def process_newsletter(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    newsletter_text = message.text
    
    if not newsletter_text:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É
    progress_msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ user_activity
    unique_users = await analytics_crud.get_unique_users()
    total_users = len(unique_users)
    
    if total_users == 0:
        await progress_msg.edit_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    success_count = 0
    fail_count = 0
    
    for i, user_id in enumerate(unique_users, 1):
        try:
            await message.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ <b>–ù–æ–≤–æ—Å—Ç—å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{newsletter_text}",
                parse_mode="HTML"
            )
            success_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if i % 10 == 0:
                await progress_msg.edit_text(
                    f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞... ({i}/{total_users})\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {fail_count}"
                )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            await asyncio.sleep(0.1)
            
        except Exception as e:
            fail_count += 1
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    await progress_msg.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {fail_count}\n"
        f"‚Ä¢ üìà –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {(success_count/total_users)*100:.1f}%",
        parse_mode="HTML"
    )
    
    await state.clear()