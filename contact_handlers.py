import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import TOKEN, ADMIN_IDS
from keyboards import get_main_keyboard, get_contact_cancel_keyboard


ADMINS = [ADMIN_IDS]


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
contact_router = Router()


# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_filter(message: types.Message) -> bool:
    return ADMIN_IDS == message.from_user.id


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ContactStates(StatesGroup):
    waiting_for_message = State()

@contact_router.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contact_start_handler(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    await message.answer(
        "üìû <b>–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ.\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>",
        reply_markup=get_contact_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ContactStates.waiting_for_message)

@contact_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
async def contact_cancel_handler(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await state.clear()
    await message.answer(
        "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )

@contact_router.message(ContactStates.waiting_for_message)
async def process_contact_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º"""
    try:
        user = message.from_user
        user_info = f"@{user.username}" if user.username else f"ID: {user.id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_message = (
            "üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}\n"
            f"<b>–ò–º—è:</b> {user.first_name} {user.last_name or ''}\n"
            f"<b>ID:</b> <code>{user.id}</code>\n\n"
            f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message.text}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        sent_to_admins = []
        for admin_id in ADMINS:
            try:
                await message.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    parse_mode="HTML"
                )
                sent_to_admins.append(admin_id)
            except Exception as e:
                logging.error(f"Error sending message to admin {admin_id}: {e}")
        
        if sent_to_admins:
            await message.answer(
                "‚úÖ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</b>\n\n"
                "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        print("------>–û–¢–ü–†–ê–í–õ–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï!<------")
        
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error processing contact message: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@contact_router.message(F.reply_to_message & F.text, admin_filter)
async def admin_reply_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if not admin_filter(message):
        return
        
    try:
        replied_message = message.reply_to_message
        if not replied_message:
            return
        
        # –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        user_id = None
        
        # –°–ø–æ—Å–æ–± 1: –ò—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "ID: 123456"
        if replied_message.text:
            import re
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            patterns = [
                r'ID:\s*<code>(\d+)</code>',
                r'ID:\s*(\d+)',
                r'ID\s*(\d+)',
                r'ID[\s:]*(\d+)'
            ]
            
            for pattern in patterns:
                match = re.search(pattern, replied_message.text)
                if match:
                    user_id = int(match.group(1))
                    break
        
        # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ entities
        if not user_id and replied_message.entities:
            for entity in replied_message.entities:
                if entity.type == "code":
                    code_text = replied_message.text[entity.offset:entity.offset + entity.length]
                    if code_text.isdigit():
                        user_id = int(code_text)
                        break
        
        # –°–ø–æ—Å–æ–± 3: –ü–æ—Å–º–æ—Ç—Ä–∏–º –≤ caption –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç
        if not user_id and replied_message.caption:
            import re
            match = re.search(r'ID[\s:]*(\d+)', replied_message.caption)
            if match:
                user_id = int(match.group(1))
        
        if user_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=f"üì© <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}",
                    parse_mode="HTML"
                )
                await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            except Exception as e:
                logging.error(f"Error sending message to user {user_id}: {e}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)")
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ID, –ø–æ–∫–∞–∂–µ–º –∞–¥–º–∏–Ω—É –∫–∞–∫ –≤—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                "–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                f"<code>/reply_user ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞—à_—Ç–µ–∫—Å—Ç</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                f"<code>/reply_user 12345678 –ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.</code>",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logging.error(f"Error in admin_reply_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")